// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;

namespace Hinojosa.Common.DataAccessLayer.Entidades
{

    // vta_mov_doc
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class VtaMovDoc
    {
        [Required]
        [Display(Name = "Id doc")]
        public int IdDoc { get; set; } // id_doc (Primary key)

        [Display(Name = "Id caja")]
        public int? IdCaja { get; set; } // id_caja

        [Display(Name = "Id corte")]
        public int? IdCorte { get; set; } // id_corte

        [Display(Name = "Id tip doc")]
        public int? IdTipDoc { get; set; } // id_tip_doc

        [Display(Name = "Id aplica doc")]
        public int? IdAplicaDoc { get; set; } // id_aplica_doc

        [Display(Name = "Id cli")]
        public int? IdCli { get; set; } // id_cli

        [Display(Name = "Id usr")]
        public int? IdUsr { get; set; } // id_usr

        [Display(Name = "Num doc")]
        public int? NumDoc { get; set; } // num_doc

        [Display(Name = "Num doc aplica")]
        public int? NumDocAplica { get; set; } // num_doc_aplica

        [DataType(DataType.DateTime)]
        [Display(Name = "Fecha")]
        public System.DateTime? Fecha { get; set; } // fecha

        [Display(Name = "Sub")]
        public double? Sub { get; set; } // sub

        [Display(Name = "Iva")]
        public double? Iva { get; set; } // iva

        [Display(Name = "Total")]
        public double? Total { get; set; } // total

        [Display(Name = "Saldo")]
        public double? Saldo { get; set; } // saldo

        [Display(Name = "Dcto")]
        public byte? Dcto { get; set; } // dcto

        [Display(Name = "Dcto sub")]
        public double? DctoSub { get; set; } // dcto_sub

        [Display(Name = "Dcto iva")]
        public double? DctoIva { get; set; } // dcto_iva

        [Display(Name = "Dcto mto")]
        public double? DctoMto { get; set; } // dcto_mto

        [Display(Name = "Costo vta")]
        public double? CostoVta { get; set; } // costo_vta

        [Display(Name = "Id fact")]
        public int? IdFact { get; set; } // id_fact

        ///<summary>
        /// 1=Abierto 2=Cerrado 3=Cancelado 4=Pendiente 5=Credito Facturado Saldo Transferido a la Factura
        ///</summary>
        [Display(Name = "Status")]
        public byte? Status { get; set; } // status

        [Display(Name = "Id suc")]
        public int? IdSuc { get; set; } // id_suc

        [Required]
        [Display(Name = "Id fact dia")]
        public int IdFactDia { get; set; } // id_fact_dia

        [Required]
        [Display(Name = "Mto cred")]
        public double MtoCred { get; set; } // mto_cred

        [Required]
        [Display(Name = "Dias")]
        public int Dias { get; set; } // dias

        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Vence")]
        public System.DateTime Vence { get; set; } // vence

        [Required]
        [Display(Name = "Id cierre")]
        public int IdCierre { get; set; } // id_cierre

        [Required]
        [Display(Name = "Id vend")]
        public int IdVend { get; set; } // id_vend

        [Required]
        [Display(Name = "Id nota")]
        public int IdNota { get; set; } // id_nota

        [Required]
        [Display(Name = "Carg misc")]
        public double CargMisc { get; set; } // carg_misc

        [Required]
        [Display(Name = "Flete")]
        public double Flete { get; set; } // flete

        [Required]
        [Display(Name = "Iva flete")]
        public double IvaFlete { get; set; } // iva_flete

        [Required]
        [Display(Name = "C dcto carg")]
        public byte CDctoCarg { get; set; } // c_dcto_carg

        [Required]
        [Display(Name = "C dcto flete")]
        public byte CDctoFlete { get; set; } // c_dcto_flete

        [Required]
        [Display(Name = "Id proy")]
        public int IdProy { get; set; } // id_proy

        [Required]
        [Display(Name = "Id ent")]
        public int IdEnt { get; set; } // id_ent

        [Required(AllowEmptyStrings = true)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Ref")]
        public string @Ref { get; set; } // ref (length: 25)

        [Required]
        [Display(Name = "Ptg com")]
        public double PtgCom { get; set; } // ptg_com

        [Required]
        [Display(Name = "Com monto")]
        public double ComMonto { get; set; } // com_monto

        [Required]
        [Display(Name = "Com pag mto")]
        public double ComPagMto { get; set; } // com_pag_mto

        [Required]
        [Display(Name = "Tipo com")]
        public byte TipoCom { get; set; } // tipo_com

        [Required]
        [Display(Name = "Tipo fac")]
        public byte TipoFac { get; set; } // tipo_fac

        [Required]
        [Display(Name = "Cant vta")]
        public double CantVta { get; set; } // cant_vta

        [Required]
        [Display(Name = "Cant dev")]
        public double CantDev { get; set; } // cant_dev

        [Required]
        [Display(Name = "Importe dev")]
        public double ImporteDev { get; set; } // importe_dev

        [Required]
        [Display(Name = "Id cod svr")]
        public int IdCodSvr { get; set; } // id_cod_svr

        [Required]
        [Display(Name = "Id mda")]
        public int IdMda { get; set; } // id_mda

        [Required]
        [Display(Name = "Oper")]
        public byte Oper { get; set; } // oper

        [Required]
        [Display(Name = "Tc")]
        public double Tc { get; set; } // tc

        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Fec reg")]
        public System.DateTime FecReg { get; set; } // fec_reg

        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Serie")]
        public string Serie { get; set; } // serie (length: 10)

        ///<summary>
        /// monto de redondeo
        ///</summary>
        [Required]
        [Display(Name = "Mto red")]
        public double MtoRed { get; set; } // mto_red

        ///<summary>
        /// monto real sin redondeo
        ///</summary>
        [Required]
        [Display(Name = "Mto real")]
        public double MtoReal { get; set; } // mto_real

        // Reverse navigation

        /// <summary>
        /// Child VtaCobroes where [vta_cobros].[id_doc_vta] point to this entity (FK_vta_cobros_vta_mov_doc)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<VtaCobro> VtaCobroes { get; set; } // vta_cobros.FK_vta_cobros_vta_mov_doc
        /// <summary>
        /// Child VtaMovParts where [vta_mov_part].[id_doc] point to this entity (FK_vta_mov_part_vta_mov_doc)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<VtaMovPart> VtaMovParts { get; set; } // vta_mov_part.FK_vta_mov_part_vta_mov_doc

        // Foreign keys

        /// <summary>
        /// Parent CatCaja pointed by [vta_mov_doc].([IdCaja]) (FK_vta_mov_doc_cat_cajas)
        /// </summary>
        public virtual CatCaja CatCaja { get; set; } // FK_vta_mov_doc_cat_cajas

        /// <summary>
        /// Parent CatCliente pointed by [vta_mov_doc].([IdCli]) (FK_vta_mov_doc_cat_clientes)
        /// </summary>
        public virtual CatCliente CatCliente { get; set; } // FK_vta_mov_doc_cat_clientes

        /// <summary>
        /// Parent CatUsr pointed by [vta_mov_doc].([IdUsr]) (FK_vta_mov_doc_cat_usr)
        /// </summary>
        public virtual CatUsr CatUsr { get; set; } // FK_vta_mov_doc_cat_usr

        /// <summary>
        /// Parent VtaCorte pointed by [vta_mov_doc].([IdCorte], [IdCaja]) (FK_vta_mov_doc_vta_cortes)
        /// </summary>
        public virtual VtaCorte VtaCorte { get; set; } // FK_vta_mov_doc_vta_cortes

        /// <summary>
        /// Parent VtaFacEnc pointed by [vta_mov_doc].([IdFact]) (FK_vta_mov_doc_vta_fac_enc)
        /// </summary>
        public virtual VtaFacEnc VtaFacEnc { get; set; } // FK_vta_mov_doc_vta_fac_enc

        public VtaMovDoc()
        {
            IdCli = 1;
            NumDoc = 0;
            NumDocAplica = 0;
            IdFact = 0;
            Status = 1;
            IdFactDia = 0;
            MtoCred = 0;
            Dias = 0;
            IdCierre = 0;
            IdVend = 0;
            IdNota = 0;
            CargMisc = 0;
            Flete = 0;
            IvaFlete = 0;
            CDctoCarg = 0;
            CDctoFlete = 0;
            IdProy = 0;
            IdEnt = 0;
            @Ref = "";
            PtgCom = 0;
            ComMonto = 0;
            ComPagMto = 0;
            TipoCom = 0;
            TipoFac = 0;
            CantVta = 0;
            CantDev = 0;
            ImporteDev = 0;
            IdCodSvr = 0;
            IdMda = 1;
            Oper = 0;
            Tc = 1;
            Serie = "";
            MtoRed = 0;
            MtoReal = 0;
            VtaCobroes = new System.Collections.Generic.List<VtaCobro>();
            VtaMovParts = new System.Collections.Generic.List<VtaMovPart>();
        }
    }

}
// </auto-generated>
