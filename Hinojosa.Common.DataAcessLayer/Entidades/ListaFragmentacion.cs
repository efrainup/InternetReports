// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;

namespace Hinojosa.Common.DataAccessLayer.Entidades
{

    // The table 'LISTA_FRAGMENTACION' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // LISTA_FRAGMENTACION
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ListaFragmentacion
    {
        [MaxLength(255)]
        [StringLength(255)]
        [Display(Name = "Object name")]
        public string ObjectName { get; set; } // ObjectName (length: 255)

        [Display(Name = "Object ID")]
        public int? ObjectId { get; set; } // ObjectId

        [MaxLength(255)]
        [StringLength(255)]
        [Display(Name = "Index name")]
        public string IndexName { get; set; } // IndexName (length: 255)

        [Display(Name = "Index ID")]
        public int? IndexId { get; set; } // IndexId

        [Display(Name = "Lvl")]
        public int? Lvl { get; set; } // Lvl

        [Display(Name = "Count pages")]
        public int? CountPages { get; set; } // CountPages

        [Display(Name = "Count rows")]
        public int? CountRows { get; set; } // CountRows

        [Display(Name = "Min rec size")]
        public int? MinRecSize { get; set; } // MinRecSize

        [Display(Name = "Max rec size")]
        public int? MaxRecSize { get; set; } // MaxRecSize

        [Display(Name = "Avg rec size")]
        public int? AvgRecSize { get; set; } // AvgRecSize

        [Display(Name = "For rec count")]
        public int? ForRecCount { get; set; } // ForRecCount

        [Display(Name = "Extents")]
        public int? Extents { get; set; } // Extents

        [Display(Name = "Extent switches")]
        public int? ExtentSwitches { get; set; } // ExtentSwitches

        [Display(Name = "Avg free bytes")]
        public int? AvgFreeBytes { get; set; } // AvgFreeBytes

        [Display(Name = "Avg page density")]
        public int? AvgPageDensity { get; set; } // AvgPageDensity

        [Display(Name = "Scan density")]
        public decimal? ScanDensity { get; set; } // ScanDensity

        [Display(Name = "Best count")]
        public int? BestCount { get; set; } // BestCount

        [Display(Name = "Actual count")]
        public int? ActualCount { get; set; } // ActualCount

        [Display(Name = "Logical frag")]
        public decimal? LogicalFrag { get; set; } // LogicalFrag

        [Display(Name = "Extent frag")]
        public decimal? ExtentFrag { get; set; } // ExtentFrag
    }

}
// </auto-generated>
