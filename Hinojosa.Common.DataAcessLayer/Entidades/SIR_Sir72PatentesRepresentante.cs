// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;

namespace Hinojosa.Common.DataAccessLayer.Entidades
{

    // SIR_72_PATENTES_REPRESENTANTES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class SIR_Sir72PatentesRepresentante
    {
        [Required]
        [Display(Name = "N ID pat rep 72")]
        public int NIdPatRep72 { get; set; } // nIdPatRep72 (Primary key)

        [Required]
        [Display(Name = "N ID patente 70")]
        public int NIdPatente70 { get; set; } // nIdPatente70

        [Display(Name = "N ID contacto")]
        public int? NIdContacto { get; set; } // nIdContacto

        [MaxLength(120)]
        [StringLength(120)]
        [Display(Name = "S archivo fiel")]
        public string SArchivoFiel { get; set; } // sArchivoFIEL (length: 120)

        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "S firma digital")]
        public string SFirmaDigital { get; set; } // sFirmaDigital (length: 250)

        [Required]
        [Display(Name = "N tipo figura")]
        public byte NTipoFigura { get; set; } // nTipoFigura

        [Required]
        [Display(Name = "B firma pedimentos")]
        public bool BFirmaPedimentos { get; set; } // bFirmaPedimentos

        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "D fecha edicion")]
        public System.DateTime DFechaEdicion { get; set; } // dFechaEdicion

        [Required]
        [Display(Name = "N ID usuario ed")]
        public int NIdUsuarioEd { get; set; } // nIdUsuarioEd

        [Display(Name = "N cve representante")]
        public int? NCveRepresentante { get; set; } // nCveRepresentante

        [Display(Name = "V clave secreta")]
        public byte[] VClaveSecreta { get; set; } // vClaveSecreta

        [Required]
        [Display(Name = "B clave aa")]
        public bool BClaveAa { get; set; } // bClaveAA

        [Required]
        [Display(Name = "B clave mandatario")]
        public bool BClaveMandatario { get; set; } // bClaveMandatario

        [Display(Name = "N ID contacto 02")]
        public int? NIdContacto02 { get; set; } // nIdContacto02

        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "S usuario cove")]
        public string SUsuarioCove { get; set; } // sUsuarioCOVE (length: 100)

        [Display(Name = "V password cove")]
        public byte[] VPasswordCove { get; set; } // vPasswordCOVE

        [Display(Name = "N tipo key fiel")]
        public byte? NTipoKeyFiel { get; set; } // nTipoKeyFIEL

        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "S usuario doda")]
        public string SUsuarioDoda { get; set; } // sUsuarioDODA (length: 100)

        [Display(Name = "V password doda")]
        public byte[] VPasswordDoda { get; set; } // vPasswordDODA

        // Foreign keys

        /// <summary>
        /// Parent Admin_Admina02Personal pointed by [SIR_72_PATENTES_REPRESENTANTES].([NIdContacto02]) (FK_SIR_72_PATENTES_REPRESENTANTES_ADMINA_02_PERSONAL)
        /// </summary>
        public virtual Admin_Admina02Personal Admin_Admina02Personal { get; set; } // FK_SIR_72_PATENTES_REPRESENTANTES_ADMINA_02_PERSONAL

        /// <summary>
        /// Parent CatEmp pointed by [SIR_72_PATENTES_REPRESENTANTES].([NIdContacto]) (FK_SIR_72_PATENTES_REPRESENTANTES_cat_emp)
        /// </summary>
        public virtual CatEmp CatEmp { get; set; } // FK_SIR_72_PATENTES_REPRESENTANTES_cat_emp

        /// <summary>
        /// Parent CatUsr pointed by [SIR_72_PATENTES_REPRESENTANTES].([NIdUsuarioEd]) (FK_SIR_72_PATENTES_REPRESENTANTES_cat_usr_ed)
        /// </summary>
        public virtual CatUsr CatUsr { get; set; } // FK_SIR_72_PATENTES_REPRESENTANTES_cat_usr_ed

        /// <summary>
        /// Parent SIR_Sir70Patente pointed by [SIR_72_PATENTES_REPRESENTANTES].([NIdPatente70]) (FK_SIR_72_PATENTES_REPRESENTANTES_SIR_70_PATENTES)
        /// </summary>
        public virtual SIR_Sir70Patente SIR_Sir70Patente { get; set; } // FK_SIR_72_PATENTES_REPRESENTANTES_SIR_70_PATENTES

        public SIR_Sir72PatentesRepresentante()
        {
            DFechaEdicion = System.DateTime.Now;
            NIdUsuarioEd = 0;
            BClaveAa = false;
            BClaveMandatario = false;
        }
    }

}
// </auto-generated>
