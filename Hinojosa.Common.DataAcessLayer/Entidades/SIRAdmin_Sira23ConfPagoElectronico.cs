// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;

namespace Hinojosa.Common.DataAccessLayer.Entidades
{

    // SIRA_23_CONF_PAGO_ELECTRONICO
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class SIRAdmin_Sira23ConfPagoElectronico
    {
        [Required]
        [Display(Name = "N ID cpe 23")]
        public int NIdCpe23 { get; set; } // nIdCPE23 (Primary key)

        [Display(Name = "N ID sucursal")]
        public int? NIdSucursal { get; set; } // nIdSucursal

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S archivo enviar")]
        public string SArchivoEnviar { get; set; } // sArchivoEnviar (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S archivo recibir")]
        public string SArchivoRecibir { get; set; } // sArchivoRecibir (length: 500)

        [Required]
        [Display(Name = "N nivel seguridad")]
        public byte NNivelSeguridad { get; set; } // nNivelSeguridad

        [Required]
        [Display(Name = "N tipo consecutivo")]
        public byte NTipoConsecutivo { get; set; } // nTipoConsecutivo

        [Required]
        [Display(Name = "N consecutivo")]
        public int NConsecutivo { get; set; } // nConsecutivo

        [Required]
        [Display(Name = "N tipo extension")]
        public byte NTipoExtension { get; set; } // nTipoExtension

        [Required(AllowEmptyStrings = true)]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "S letra inicial")]
        public string SLetraInicial { get; set; } // sLetraInicial (length: 1)

        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "S extension")]
        public string SExtension { get; set; } // sExtension (length: 3)

        [Required]
        [Display(Name = "B aplica pago aa")]
        public bool BAplicaPagoAa { get; set; } // bAplicaPagoAA

        [Required]
        [Display(Name = "B genera pcreco")]
        public bool BGeneraPcreco { get; set; } // bGeneraPCRECO

        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "D fecha edicion")]
        public System.DateTime DFechaEdicion { get; set; } // dFechaEdicion

        [Required]
        [Display(Name = "N ID usuario ed")]
        public int NIdUsuarioEd { get; set; } // nIdUsuarioEd

        [Required]
        [Display(Name = "D fecha consecutivo")]
        public System.DateTime DFechaConsecutivo { get; set; } // dFechaConsecutivo

        [Display(Name = "N semana saai")]
        public int? NSemanaSaai { get; set; } // nSemanaSaai

        [Required]
        [Display(Name = "B clave aa")]
        public bool BClaveAa { get; set; } // bClaveAA

        [Required]
        [Display(Name = "B clave mandatario")]
        public bool BClaveMandatario { get; set; } // bClaveMandatario

        [Required]
        [Display(Name = "B valida pago banco")]
        public bool BValidaPagoBanco { get; set; } // bValidaPagoBanco

        [Display(Name = "N ID producto")]
        public int? NIdProducto { get; set; } // nIdProducto

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta ece nvio")]
        public string SRutaEcEnvio { get; set; } // sRutaECEnvio (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta ecr ecepcion")]
        public string SRutaEcRecepcion { get; set; } // sRutaECRecepcion (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta sag envio")]
        public string SRutaSagEnvio { get; set; } // sRutaSagEnvio (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta sag recepcion")]
        public string SRutaSagRecepcion { get; set; } // sRutaSagRecepcion (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta no ped envio")]
        public string SRutaNoPedEnvio { get; set; } // sRutaNoPedEnvio (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta no ped recepcion")]
        public string SRutaNoPedRecepcion { get; set; } // sRutaNoPedRecepcion (length: 500)

        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "S letra inicial no ped")]
        public string SLetraInicialNoPed { get; set; } // sLetraInicialNoPed (length: 1)

        [Required]
        [Display(Name = "B sucursal no ped")]
        public bool BSucursalNoPed { get; set; } // bSucursalNoPed

        [Required]
        [Display(Name = "B tipo val sagarpa")]
        public bool BTipoValSagarpa { get; set; } // bTipoValSagarpa

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta prof envio")]
        public string SRutaProfEnvio { get; set; } // sRutaProfEnvio (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta prof recepcion")]
        public string SRutaProfRecepcion { get; set; } // sRutaProfRecepcion (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta prof elim envio")]
        public string SRutaProfElimEnvio { get; set; } // sRutaProfElimEnvio (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta prof elim recepcion")]
        public string SRutaProfElimRecepcion { get; set; } // sRutaProfElimRecepcion (length: 500)

        [MaxLength(12)]
        [StringLength(12)]
        [Display(Name = "S clave no pedimento")]
        public string SClaveNoPedimento { get; set; } // sClaveNoPedimento (length: 12)

        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "S letra ini no ped resp")]
        public string SLetraIniNoPedResp { get; set; } // sLetraIniNoPedResp (length: 1)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta m 3 envio")]
        public string SRutaM3Envio { get; set; } // sRutaM3Envio (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta m 3 recepcion")]
        public string SRutaM3Recepcion { get; set; } // sRutaM3Recepcion (length: 500)

        [Required]
        [Display(Name = "B anidado m 3")]
        public bool BAnidadoM3 { get; set; } // bAnidadoM3

        [Required]
        [Display(Name = "B autoriza fondo erp")]
        public bool BAutorizaFondoErp { get; set; } // bAutorizaFondoERP

        [Required]
        [Display(Name = "B archivo borrado")]
        public bool BArchivoBorrado { get; set; } // bArchivoBorrado

        [Required]
        [Display(Name = "B edicion muestras")]
        public bool BEdicionMuestras { get; set; } // bEdicionMuestras

        [Required]
        [Display(Name = "B partidas remesas")]
        public bool BPartidasRemesas { get; set; } // bPartidasRemesas

        [Required]
        [Display(Name = "B cliente ejecutivo")]
        public bool BClienteEjecutivo { get; set; } // bClienteEjecutivo

        [Required]
        [Display(Name = "B act pp")]
        public bool BActPp { get; set; } // bActPP

        [Required]
        [Display(Name = "B ex cuenta gasto")]
        public bool BExCuentaGasto { get; set; } // bExCuentaGasto

        [Required]
        [Display(Name = "B consultar tarifa")]
        public bool BConsultarTarifa { get; set; } // bConsultarTarifa

        [Required]
        [Display(Name = "B aplica ID rc")]
        public bool BAplicaIdRc { get; set; } // bAplicaIdRC

        [Required]
        [Display(Name = "B folio facturas")]
        public bool BFolioFacturas { get; set; } // bFolioFacturas

        [Required]
        [Display(Name = "B calcula sir")]
        public bool BCalculaSir { get; set; } // bCalculaSIR

        [Required]
        [Display(Name = "B utiliza fox")]
        public bool BUtilizaFox { get; set; } // bUtilizaFox

        [Required]
        [Display(Name = "B prefijos remesas")]
        public bool BPrefijosRemesas { get; set; } // bPrefijosRemesas

        [Display(Name = "N hora despachos")]
        public int? NHoraDespachos { get; set; } // nHoraDespachos

        [Required]
        [Display(Name = "B incluir barcode pc")]
        public bool BIncluirBarcodePc { get; set; } // bIncluirBarcodePC

        [Display(Name = "B genera bandera")]
        public bool? BGeneraBandera { get; set; } // bGeneraBandera

        [Display(Name = "B verifica saldo")]
        public bool? BVerificaSaldo { get; set; } // bVerificaSaldo

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S password saldo")]
        public string SPasswordSaldo { get; set; } // sPasswordSaldo (length: 500)

        [Display(Name = "N ID suc 12")]
        public int? NIdSuc12 { get; set; } // nIdSuc12

        [Display(Name = "B actualiza igifp")]
        public bool? BActualizaIgifp { get; set; } // bActualizaIGIFP

        [Display(Name = "B valida sellos a 4")]
        public bool? BValidaSellosA4 { get; set; } // bValidaSellosA4

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta lib ee nvio")]
        public string SRutaLibEEnvio { get; set; } // sRutaLibEEnvio (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta lib er ecepcion")]
        public string SRutaLibERecepcion { get; set; } // sRutaLibERecepcion (length: 500)

        [Display(Name = "B recargos con fraccion")]
        public bool? BRecargosConFraccion { get; set; } // bRecargosConFraccion

        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "S correo electronico")]
        public string SCorreoElectronico { get; set; } // sCorreoElectronico (length: 50)

        [Display(Name = "B no aplica bl")]
        public bool? BNoAplicaBl { get; set; } // bNoAplicaBL

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta cove xml")]
        public string SRutaCoveXml { get; set; } // sRutaCoveXML (length: 500)

        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "S usuario cove")]
        public string SUsuarioCove { get; set; } // sUsuarioCove (length: 50)

        [MaxLength(150)]
        [StringLength(150)]
        [Display(Name = "S password cove")]
        public string SPasswordCove { get; set; } // sPasswordCove (length: 150)

        [Display(Name = "B incluir caratula ref")]
        public bool? BIncluirCaratulaRef { get; set; } // bIncluirCaratulaRef

        [Display(Name = "B actualiza firmas manual")]
        public bool? BActualizaFirmasManual { get; set; } // bActualizaFirmasManual

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S ruta keyc ove")]
        public string SRutaKeyCove { get; set; } // sRutaKEYCove (length: 500)

        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "S palabra sec cove")]
        public string SPalabraSecCove { get; set; } // sPalabraSecCove (length: 100)

        [Display(Name = "B concatena fact covep ed ant")]
        public bool? BConcatenaFactCovePedAnt { get; set; } // bConcatenaFactCOVEPedAnt

        [Display(Name = "B no autocompletar cbr emesa")]
        public bool? BNoAutocompletarCbRemesa { get; set; } // bNoAutocompletarCBRemesa

        [Display(Name = "B fechas selec aleatoria")]
        public bool? BFechasSelecAleatoria { get; set; } // bFechasSelecAleatoria

        [Display(Name = "B color seleccion en notificacion")]
        public bool? BColorSeleccionEnNotificacion { get; set; } // bColorSeleccionEnNotificacion

        [Display(Name = "B agregar doctos crear ref")]
        public bool? BAgregarDoctosCrearRef { get; set; } // bAgregarDoctosCrearRef

        [Display(Name = "B permite uso fracciones vulnerables")]
        public bool? BPermiteUsoFraccionesVulnerables { get; set; } // bPermiteUsoFraccionesVulnerables

        [Display(Name = "B omitir impuesto eci")]
        public bool? BOmitirImpuestoEci { get; set; } // bOmitirImpuestoECI

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S sociedad constituida")]
        public string SSociedadConstituida { get; set; } // sSociedadConstituida (length: 500)

        [Display(Name = "N tipo recargo")]
        public byte? NTipoRecargo { get; set; } // nTipoRecargo

        [Display(Name = "B activa contra sup pag elec")]
        public bool? BActivaContraSupPagElec { get; set; } // bActivaContraSupPagElec

        [Display(Name = "B aplica dta 8 ivaieps")]
        public bool? BAplicaDta8Ivaieps { get; set; } // bAplicaDTA8IVAIEPS

        [Display(Name = "B automatiza info cove")]
        public bool? BAutomatizaInfoCove { get; set; } // bAutomatizaInfoCOVE

        [Display(Name = "B actualiza ivar 1")]
        public bool? BActualizaIvar1 { get; set; } // bActualizaIVAR1

        [Display(Name = "B habilitar inventarios sellos")]
        public bool? BHabilitarInventariosSellos { get; set; } // bHabilitarInventariosSellos

        [Display(Name = "B eliminar espacios cbp artes ii")]
        public bool? BEliminarEspaciosCbPartesIi { get; set; } // bEliminarEspaciosCBPartesII

        [Display(Name = "B incluir barcode imex")]
        public bool? BIncluirBarcodeImex { get; set; } // bIncluirBarcodeIMEX

        [Display(Name = "B anidado archivo pago")]
        public bool? BAnidadoArchivoPago { get; set; } // bAnidadoArchivoPago

        [Display(Name = "B activa convertidor unidades")]
        public bool? BActivaConvertidorUnidades { get; set; } // bActivaConvertidorUnidades

        [Display(Name = "B activa precio unitario parte")]
        public bool? BActivaPrecioUnitarioParte { get; set; } // bActivaPrecioUnitarioParte

        [Display(Name = "B excluir dtap arte iif racciones")]
        public bool? BExcluirDtaParteIiFracciones { get; set; } // bExcluirDTAParteIIFracciones

        [Display(Name = "B solo conciderar dtap arte iig lobal")]
        public bool? BSoloConciderarDtaParteIiGlobal { get; set; } // bSoloConciderarDTAParteIIGlobal

        [MaxLength(250)]
        [StringLength(250)]
        [Display(Name = "S password pago cuenta cliente")]
        public string SPasswordPagoCuentaCliente { get; set; } // sPasswordPagoCuentaCliente (length: 250)

        [Display(Name = "B confirma cuenta cliente")]
        public bool? BConfirmaCuentaCliente { get; set; } // bConfirmaCuentaCliente

        [Display(Name = "N consecutivo tope")]
        public int? NConsecutivoTope { get; set; } // nConsecutivoTope

        [Display(Name = "N consecutivo inicio")]
        public int? NConsecutivoInicio { get; set; } // nConsecutivoInicio

        [Display(Name = "N tipo factor act")]
        public int? NTipoFactorAct { get; set; } // nTipoFactorAct

        [Display(Name = "B administra forma pago 9 partidas")]
        public bool? BAdministraFormaPago9Partidas { get; set; } // bAdministraFormaPago9Partidas

        [Display(Name = "B genera cod bar rem espacio")]
        public bool? BGeneraCodBarRemEspacio { get; set; } // bGeneraCodBarRemEspacio

        [Display(Name = "B genera cod bar parte iis in ceros")]
        public bool? BGeneraCodBarParteIiSinCeros { get; set; } // bGeneraCodBarParteIISinCeros

        [Display(Name = "B genera previa autorizacion")]
        public bool? BGeneraPreviaAutorizacion { get; set; } // bGeneraPreviaAutorizacion

        [Display(Name = "B bitacora impresion pedimento")]
        public bool? BBitacoraImpresionPedimento { get; set; } // bBitacoraImpresionPedimento

        [Display(Name = "B ll enar espacio vacio cbr emesa")]
        public bool? BLLenarEspacioVacioCbRemesa { get; set; } // bLLenarEspacioVacioCBRemesa

        // Reverse navigation

        /// <summary>
        /// Child McpSucs (Many-to-Many) mapped by table [SIRA_62_CONFIG_OFICINA_SUCURSALES]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<McpSuc> McpSucs { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent Admin_Admina12Sucursale pointed by [SIRA_23_CONF_PAGO_ELECTRONICO].([NIdSuc12]) (FK_SIRA_23_CONF_PAGO_ELECTRONICO_ADMINA_12_SUCURSALES)
        /// </summary>
        public virtual Admin_Admina12Sucursale Admin_Admina12Sucursale { get; set; } // FK_SIRA_23_CONF_PAGO_ELECTRONICO_ADMINA_12_SUCURSALES

        /// <summary>
        /// Parent CatPro pointed by [SIRA_23_CONF_PAGO_ELECTRONICO].([NIdProducto]) (FK_SIRA_23_CONF_PAGO_ELECTRONICO_cat_pro)
        /// </summary>
        public virtual CatPro CatPro { get; set; } // FK_SIRA_23_CONF_PAGO_ELECTRONICO_cat_pro

        /// <summary>
        /// Parent CatUsr pointed by [SIRA_23_CONF_PAGO_ELECTRONICO].([NIdUsuarioEd]) (FK_SIRA_23_CONF_PAGO_ELECTRONICO_cat_usr_ed)
        /// </summary>
        public virtual CatUsr CatUsr { get; set; } // FK_SIRA_23_CONF_PAGO_ELECTRONICO_cat_usr_ed

        /// <summary>
        /// Parent McpSuc pointed by [SIRA_23_CONF_PAGO_ELECTRONICO].([NIdSucursal]) (FK_SIRA_23_CONF_PAGO_ELECTRONICO_mcp_suc)
        /// </summary>
        public virtual McpSuc McpSuc { get; set; } // FK_SIRA_23_CONF_PAGO_ELECTRONICO_mcp_suc

        public SIRAdmin_Sira23ConfPagoElectronico()
        {
            DFechaEdicion = System.DateTime.Now;
            NIdUsuarioEd = 0;
            BIncluirBarcodePc = false;
            BRecargosConFraccion = false;
            BNoAplicaBl = false;
            BHabilitarInventariosSellos = false;
            BIncluirBarcodeImex = false;
            BAnidadoArchivoPago = false;
            McpSucs = new System.Collections.Generic.List<McpSuc>();
        }
    }

}
// </auto-generated>
