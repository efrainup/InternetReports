// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;

namespace Hinojosa.Common.DataAccessLayer.Entidades
{

    // SIR_49_OPERACIONES_FACTURAS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class SIR_Sir49OperacionesFactura
    {
        [Required]
        [Display(Name = "N ID oper fact 49")]
        public int NIdOperFact49 { get; set; } // nIdOperFact49 (Primary key)

        [Required(AllowEmptyStrings = true)]
        [MaxLength(64)]
        [StringLength(64)]
        [Display(Name = "N operacion")]
        public string NOperacion { get; set; } // nOperacion (length: 64)

        [Required]
        [Display(Name = "D fecha")]
        public System.DateTime DFecha { get; set; } // dFecha

        [Display(Name = "N tipo operacion")]
        public byte? NTipoOperacion { get; set; } // nTipoOperacion

        [Required]
        [Display(Name = "N ID cliente")]
        public int NIdCliente { get; set; } // nIdCliente

        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "D fecha edicion")]
        public System.DateTime DFechaEdicion { get; set; } // dFechaEdicion

        [Required]
        [Display(Name = "N ID usuario ed")]
        public int NIdUsuarioEd { get; set; } // nIdUsuarioEd

        [Required]
        [Display(Name = "N ID suc pat adu 71")]
        public int NIdSucPatAdu71 { get; set; } // nIdSucPatAdu71

        [Required]
        [Display(Name = "B partida como fraccion")]
        public bool BPartidaComoFraccion { get; set; } // bPartidaComoFraccion

        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "S modo agrupacion")]
        public string SModoAgrupacion { get; set; } // sModoAgrupacion (length: 30)

        [Required]
        [Display(Name = "B identificador permiso")]
        public bool BIdentificadorPermiso { get; set; } // bIdentificadorPermiso

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S instrucciones")]
        public string SInstrucciones { get; set; } // sInstrucciones (length: 500)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S observaciones")]
        public string SObservaciones { get; set; } // sObservaciones (length: 500)

        [Display(Name = "D pago")]
        public System.DateTime? DPago { get; set; } // dPago

        [Display(Name = "N ID clie 07")]
        public int? NIdClie07 { get; set; } // nIdClie07

        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "S modo union")]
        public string SModoUnion { get; set; } // sModoUnion (length: 10)

        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "S limitador")]
        public string SLimitador { get; set; } // sLimitador (length: 5)

        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "S oper cove")]
        public string SOperCove { get; set; } // sOperCOVE (length: 50)

        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "S limitador obs")]
        public string SLimitadorObs { get; set; } // sLimitadorObs (length: 5)

        [MaxLength(500)]
        [StringLength(500)]
        [Display(Name = "S motivo desagrupacion")]
        public string SMotivoDesagrupacion { get; set; } // sMotivoDesagrupacion (length: 500)

        [DataType(DataType.DateTime)]
        [Display(Name = "D fecha impresion nota")]
        public System.DateTime? DFechaImpresionNota { get; set; } // dFechaImpresionNota

        [Display(Name = "B pre nota")]
        public bool? BPreNota { get; set; } // bPreNota

        [DataType(DataType.DateTime)]
        [Display(Name = "D fecha captura nota")]
        public System.DateTime? DFechaCapturaNota { get; set; } // dFechaCapturaNota

        [Display(Name = "B autorizada vulnerables")]
        public bool? BAutorizadaVulnerables { get; set; } // bAutorizadaVulnerables

        [Display(Name = "N status lock")]
        public int? NStatusLock { get; set; } // nStatusLock

        [MaxLength(800)]
        [StringLength(800)]
        [Display(Name = "S desc status")]
        public string SDescStatus { get; set; } // sDescStatus (length: 800)

        [Display(Name = "B agrupando")]
        public bool? BAgrupando { get; set; } // bAgrupando

        [Display(Name = "B coves ubdivision")]
        public bool? BCoveSubdivision { get; set; } // bCOVESubdivision

        [Display(Name = "B opera subdivision")]
        public bool? BOperaSubdivision { get; set; } // bOperaSubdivision

        [Display(Name = "N ID imex 07")]
        public int? NIdImex07 { get; set; } // nIdImex07

        [Display(Name = "N ID imex")]
        public int? NIdImex { get; set; } // nIdImex

        [Display(Name = "B desactiva vma utomatico")]
        public bool? BDesactivaVmAutomatico { get; set; } // bDesactivaVMAutomatico

        [Display(Name = "B covea denda")]
        public bool? BCoveAdenda { get; set; } // bCOVEAdenda

        // Reverse navigation

        /// <summary>
        /// Child SIR_Sir156EntradasBodega (Many-to-Many) mapped by table [SIR_362_OPER_FACTURAS_ENTRADA_BODEGA]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SIR_Sir156EntradasBodega> SIR_Sir156EntradasBodega { get; set; } // Many to many mapping
        /// <summary>
        /// Child SIR_Sir391FacturasCove where [SIR_391_FACTURAS_COVE].[nIdOperFact49] point to this entity (FK_SIR_391_FACTURAS_COVE_SIR_49_OPERACIONES_FACTURAS)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SIR_Sir391FacturasCove> SIR_Sir391FacturasCove { get; set; } // SIR_391_FACTURAS_COVE.FK_SIR_391_FACTURAS_COVE_SIR_49_OPERACIONES_FACTURAS
        /// <summary>
        /// Child SIR_Sir52Factura where [SIR_52_FACTURAS].[nIdOperFact49] point to this entity (FK_SIR_52_FACTURAS_SIR_49_OPERACIONES_FACTURAS)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SIR_Sir52Factura> SIR_Sir52Factura { get; set; } // SIR_52_FACTURAS.FK_SIR_52_FACTURAS_SIR_49_OPERACIONES_FACTURAS

        // Foreign keys

        /// <summary>
        /// Parent Admin_Adminc07Cliente pointed by [SIR_49_OPERACIONES_FACTURAS].([NIdClie07]) (FK_SIR_49_OPERACIONES_FACTURAS_ADMINC_07_CLIENTES)
        /// </summary>
        public virtual Admin_Adminc07Cliente Admin_Adminc07Cliente { get; set; } // FK_SIR_49_OPERACIONES_FACTURAS_ADMINC_07_CLIENTES

        /// <summary>
        /// Parent CatCliente pointed by [SIR_49_OPERACIONES_FACTURAS].([NIdCliente]) (FK_SIR_49_OPERACIONES_FACTURAS_cat_clientes)
        /// </summary>
        public virtual CatCliente CatCliente_NIdCliente { get; set; } // FK_SIR_49_OPERACIONES_FACTURAS_cat_clientes

        /// <summary>
        /// Parent CatCliente pointed by [SIR_49_OPERACIONES_FACTURAS].([NIdImex]) (FK_SIR_49_OPERACIONES_FACTURAS_CAT_CLIENTES_IMEX)
        /// </summary>
        public virtual CatCliente CatCliente_NIdImex { get; set; } // FK_SIR_49_OPERACIONES_FACTURAS_CAT_CLIENTES_IMEX

        /// <summary>
        /// Parent CatUsr pointed by [SIR_49_OPERACIONES_FACTURAS].([NIdUsuarioEd]) (FK_SIR_49_OPERACIONES_FACTURAS_cat_usr_ed)
        /// </summary>
        public virtual CatUsr CatUsr { get; set; } // FK_SIR_49_OPERACIONES_FACTURAS_cat_usr_ed

        /// <summary>
        /// Parent SIR_Sir71SucursalPatenteAduana pointed by [SIR_49_OPERACIONES_FACTURAS].([NIdSucPatAdu71]) (FK_SIR_49_OPERACIONES_FACTURAS_SIR_71_SUCURSAL_PATENTE_ADUANA)
        /// </summary>
        public virtual SIR_Sir71SucursalPatenteAduana SIR_Sir71SucursalPatenteAduana { get; set; } // FK_SIR_49_OPERACIONES_FACTURAS_SIR_71_SUCURSAL_PATENTE_ADUANA

        public SIR_Sir49OperacionesFactura()
        {
            NIdCliente = 0;
            DFechaEdicion = System.DateTime.Now;
            NIdUsuarioEd = 0;
            BPartidaComoFraccion = false;
            BIdentificadorPermiso = false;
            SIR_Sir391FacturasCove = new System.Collections.Generic.List<SIR_Sir391FacturasCove>();
            SIR_Sir52Factura = new System.Collections.Generic.List<SIR_Sir52Factura>();
            SIR_Sir156EntradasBodega = new System.Collections.Generic.List<SIR_Sir156EntradasBodega>();
        }
    }

}
// </auto-generated>
